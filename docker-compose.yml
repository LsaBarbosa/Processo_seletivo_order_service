version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  redis:
    image: redis:7.0
    container_name: redis-cache
    restart: always
    ports:
      - "6379:6379"
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq-broker
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app-network

  service-order:
    build:
      context: .
      dockerfile: Dockerfile
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    ports:
        - "8085-8087:8080"
    depends_on:
      - mysql
      - redis
      - rabbitmq
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/order_db?createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: root
      SPRING_REDIS_HOST: redis-cache
      SPRING_REDIS_PORT: 6379
      SPRING_RABBITMQ_HOST: rabbitmq-broker
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_DOC_SWAGGER_UI_PATH: /swagger-ui.html
      SPRING_DOC_API_DOCS_PATH: /v3/api-docs
    networks:
      - app-network

  nginx:
    image: nginx:latest
    container_name: nginx-load-balancer
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - service-order
    networks:
      - app-network

networks:
  app-network:

volumes:
  mysql_data: